Contagem(15);
void Contagem(int max)
{
    for (int i = 0; i < max; i++)
    {
        Console.Write($"{i}, ");
        if (i == max - 1)
        {
            Console.Write($"{max}\n");
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////

string[] ipv4Input = { "107..2.5", "199.168.0.1", "555.254.0.", "147.1..7" };
string[] address;
bool validLength = false;
bool validZeroes = false;
bool validRange = false;

foreach (string ip in ipv4Input)
{
    address = ip.Split('.', StringSplitOptions.RemoveEmptyEntries);
    ValidateLength();
    ValidateZeroes();
    ValidateRange();

    if (validLength && validZeroes && validRange)
    {
        Console.WriteLine($"ip {ip} is a valid IPv4 address");
        Console.Write($"\t Length: {validLength}    Zeroes: {validZeroes}   Range: {validRange}\n");
    }   
    else
    {
        Console.WriteLine($"ip {ip} is a invalid IPv4 address");
        Console.Write($"\t Length: {validLength}    Zeroes: {validZeroes}   Range: {validRange}\n");
    }

}
// Método para verificar tamanho do IP.
void ValidateLength()
{
    validLength = address.Length == 4;
}

// Método para caso o IP possuir mais de 1 digito, se o mesmo tem 0 a esquerda.
void ValidateZeroes()
{
    foreach (string number in address)
    {
        if (number.Length > 1 && number.StartsWith("0"))
        {
            validZeroes = false;
            return;
        }
    }
    validZeroes = true;
}

// Método para verificar se cada numeração é menor que 0 ou maior que 255
void ValidateRange()
{
    foreach (string number in address)
    {
        int num = int.Parse(number);
        if (num < 0 || num > 255)
        {
            validRange = false;
            return;
        }
    }
    validRange = true;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
----- CRIAR MÉTODOS PARA FUNÇÕES REUTILIZAVEIS;

using System;

int[] times = { 800, 1200, 1600, 2000, 0};
int diff = 0;

Console.WriteLine("Enter current GMT");
int currentGMT = Convert.ToInt32(Console.ReadLine());

Console.WriteLine("Current Medicine Schedule:");
DisplayTimes();
/* Format and display medicine times */


Console.WriteLine("Enter new GMT");
int newGMT = Convert.ToInt32(Console.ReadLine());

if (Math.Abs(newGMT) > 12 || Math.Abs(currentGMT) > 12)
{
    Console.WriteLine("Invalid GMT");
}
else if (newGMT <= 0 && currentGMT <= 0 || newGMT >= 0 && currentGMT >= 0)
{
    diff = 100 * (Math.Abs(newGMT) - Math.Abs(currentGMT));

    /* Adjust the times by adding the difference, keeping the value within 24 hours */
    AdjustTimes();
}
else
{
    diff = 100 * (Math.Abs(newGMT) + Math.Abs(currentGMT));

    /* Adjust the times by adding the difference, keeping the value within 24 hours */
    AdjustTimes();
}

Console.WriteLine("New Medicine Schedule:");

/* Format and display medicine times */
DisplayTimes();


void DisplayTimes()
{
    foreach (int val in times)
    {
        string time = val.ToString();
        int len = time.Length;

        if (len >= 3)
        {
            time = time.Insert(len - 2, ":");
        }
        else if (len == 2)
        {
            time = time.Insert(0, "0:");
        }
        else
        {
            time = time.Insert(0, "0:0");
        }
        Console.Write($"{time} ");
    }
    Console.WriteLine();
}

void AdjustTimes()
{
    /*Adjust the times by adding the difference, keep the value within 24 hours*/
    for (int i = 0; i < times.Length; i++)
    {
        times[i] = ((times[i] + diff)) % 2400;
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
----- > Ajuste de fuso Horario - Diferença de fusos

int[] schedule = { 800, 1200, 1600, 2000 };
int diff = 0;

DisplayAdjustedTimes(schedule, -9, 4);

void DisplayAdjustedTimes(int[] times, int currentGMT, int newGMT)
{
    // Verifica com MATH.ABS se nada está acima de 12.
    if (Math.Abs(newGMT) > 12 || Math.Abs(currentGMT) > 12)
    {
        Console.WriteLine();
    }
    //Verifica se os dois valores possuem SINAIS IGUAIS, valida se simultaneamente estão abaixo de 0 ou acima de 0.
    else if (newGMT <= 0 && currentGMT <= 0 || newGMT >= 0 && currentGMT >= 0)
    {
        diff = 100 * (Math.Abs(newGMT) - Math.Abs(currentGMT));
    }
    // Se sinais forem opostos, realiza calculo abaixo, aplicando Math.ABS
    else
    {
        diff = 100 * (Math.Abs(newGMT) + Math.Abs(currentGMT));
    }
    //Exibe os novos horarios
    for (int i = 0; i < times.Length; i++)
    {
        int newTime = (times[i] + diff) % 2400;
        Console.WriteLine($"{times[i]} --> {newTime}");
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
string[] students = {"Vani", "Vanelsson", "Vanik", "Vanozo"};

DisplayStudents(students);

// Alterando parametro de acordo com o parametro original
DisplayStudents(new string[] {"Caralhoso", "Gigantoso gostoso"});

Console.WriteLine("-----Vamos alterar alguns: ");
DisplayStudents(new string[] {"Vanoso", "Vaniassimus"});

// Uma método aceita um parametro que tenha o mesmo nome que uma variavel real. exemplo STUDENTS.
void DisplayStudents(string[] students) 
{
    foreach (string student in students)
    {
        Console.Write($"{student}, ");
    }
    Console.WriteLine();
}
*/
///////////////////////////////////////////////////////////////////
string? input;
// Variavel GLOBAL, para utilizar em métodos.
double pi = 3.14159;
bool validy = false;
string valorInput = "";
int valor = 0;

// loop para coleta de dados
do
{
    Console.Write($"Vamos calcular a area e a circunferencia de um circulo, insira o raio: ");
    ColetarRadius();
    if (validy)
    {
        ShowAreaAndCircumference(valor);
    }
} while (validy == false);


// MÉTODO PARA COLETAR DADOS DE ENTRADA DO USUARIO, E VERIFICAR SE OCORRE CONVERSÃO PARA INT, UTILIZANDO TRYPARSE.
void ColetarRadius() 
{
    string? input = Console.ReadLine();
    if (input != null)
    {
        valorInput = input.Trim();
    }
    if (int.TryParse(valorInput, out valor))
    {
        validy = true;
    }
    else
    {
        if(valorInput == "")
        Console.WriteLine($"Valor inserido não é valido!");
    }
}

// MÉTODO chamador de métodos de exibição de area e circunferencia calculadas.
void ShowAreaAndCircumference(int radius)
{
    Console.WriteLine($"Circle with radius {radius}");
    PrintCircleArea(radius);
    PrintCircumference(radius);
}
void PrintCircleArea(int radius)
{
    //Calcula e exibe a area de um circulo.
    double area = pi * (radius * radius);
    Console.WriteLine($"Area: {area}");
}
void PrintCircumference(int radius)
{
    // Calcula e exibe a cirunferencia de um circulo.
    double circumference = 2 * pi * radius;
    Console.WriteLine($"Circumference: {circumference}");
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//            TIPO DE VALOR ---->
int a = 6;
int b = 7;
int c = 0;

// ------ Será possivel notar que as variaveis globais não teem seu valor alterado.
Multiply(a, b, c);
Console.WriteLine($"Estado global dos valores: {a} x {b} = {c}");

// ------ Iniciado método com PARAMETROS cujo as variaveis possuem o mesmo nome que as variaveis globais.
void Multiply(int a, int b, int c)
{
     c = a * b;
     Console.WriteLine($"Resultado da multiplação no método: {a} x {b} = {c}");
}

//////////////////////////////////////
//         TIPO DE REFERENCIA ---->

int[] array = {1, 2, 3, 4, 5}


// Método para printar o elemento de cada indice da matriz.
void PrintArray(int[] array)
{
    foreach(int num in array)
        {
            Console.Write($"{num} ");
        }
}

void Clearing(int[] array)
{
    for(int i = 0; i < array.Length; i++)
        {
            array[i] = 0;
        }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
