// ---------------------> Minha solução 
// Trabalhando com .Split, String.Join, Array.Reverse(minhaArray);

string pangram = "The quick brown fox jumps over the lazy dog";
string[] pangramStringArray = pangram.Split(" ");
char[] pangramCharArray = new char[5];
string[] pangramReverseArray = new string[9];
string pangramReverse = "";

for (int i = 0; i < 9; i++)
{
    string convert = pangramStringArray[i];
    pangramCharArray = convert.ToCharArray();
    for (int j = 0; j < pangramCharArray.Length; j++)
    {
        pangramReverseArray[i] += pangramCharArray[j];
    }
}
pangramReverse = String.Join(" ", pangramReverseArray);
Console.WriteLine(pangramReverse);

// ---------------- Solução LEARN
// Trabalhando com .Split, String.Join, Array.Reverse(minhaArray);
// Aqui foi utilizado o construtor de string .... newMessage[i] = new string(letters);

string pangram = "The quick brown fox jumps over the lazy dog";

string[] message = pangram.Split(' ');

string[] newMessage = new string[message.Length];

for(int i = 0; i < message.Length; i++)
{
    char[] letters = message[i].ToCharArray();
    Array.Reverse(letters);
    newMessage[i] = new string(letters);
}

string result = String.Join(' ', newMessage);
Console.WriteLine(result);

////////////////////////////////////////// ---------------------> Minha solução( Analisar uma cadeia de caracteres de pedidos, classificá-los e marcar possíveis erro )
string orderStream = "B123,C234,A345,C15,B177,G3003,C235,B179";
string[] pedidos = orderStream.Split(',');

Array.Sort(pedidos);
for (int i = 0; i < pedidos.Length; i++)
{
    char[] letters = pedidos[i].ToCharArray();
    Console.WriteLine(letters.Length != 4 ? $"{pedidos[i]}\t- Error" : $"{pedidos[i]}");
}

///////////// ---------------- Solução LEARN ( Analisar uma cadeia de caracteres de pedidos, classificá-los e marcar possíveis erro )

string orderStream = "B123,C234,A345,C15,B177,G3003,C235,B179";
string[] items = orderStream.Split(',');
Array.Sort(items);

foreach (var item in items)
{
    if (item.Length == 4)
    {
        Console.WriteLine(item);
    }
    else
    {
        Console.WriteLine(item + "\t- Error");
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////
///////// -----> Formatação de Valores >>>>
int invoiceNumber = 1201;
decimal productShares = 25.4568m;
decimal subtotal = 2750.00m;
decimal taxPercentage = .15825m;
decimal total = 3185.19m;

Console.WriteLine($"Invoice number: {invoiceNumber}");
Console.WriteLine($"    Shares: {productShares:N3} Product");
Console.WriteLine($"      Sub Total: {subtotal:C2}");
Console.WriteLine($"            Tax: {taxPercentage:P2}");
Console.WriteLine($"    Total Billed: {total:C}");

---->>minhaString.PadLeft(); ou PedRight(); // pode ser utilizado com ou sem caractere definido.
string input = "Pad this";
Console.WriteLine(input.PadLeft(12, '-'));
Console.WriteLine(input.PadRight(12, '-'));

string paymentId = "769C";
string payeeName = "Mr. Stephen Ortega";
string paymentAmount = "$5,000.00";

var formattedLine = paymentId.PadRight(6);
formattedLine += payeeName.PadRight(24);
formattedLine += paymentAmount.PadRight(10);

Console.WriteLine("1234567890123456789012345678901234567890");
Console.WriteLine(formattedLine);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// -->DESAFIO LEARN: Executar formatação de carta de negócios.

using System.Globalization;
CultureInfo.CurrentCulture = new CultureInfo("en-US");

string customerName = "Ms. Barros";
string currentProduct = "Magic Yield";
int currentShares = 2975000;
decimal currentReturn = 0.1275m;
decimal currentProfit = 55000000.0m;

string newProduct = "Glorious Future";
decimal newReturn = 0.13125m;
decimal newProfit = 63000000.0m;

//
Console.WriteLine($"Dear {customerName}\n");
Console.WriteLine($"As a customer of our {currentProduct} offering we are excited to tell you about a new financial product that would dramatically increase your return.\n");
Console.WriteLine($"Currently, you own {currentShares:C2} shares at a return of {currentReturn:P2}.\n");
Console.WriteLine($"Our new product, {newProduct} offers a return of {newReturn:P2}.  Given your current volume, your potential profit would be ¤{newProfit:N}.\n");
Console.WriteLine("Here's a quick comparison:\n");

string comparisonMessage = "";
comparisonMessage = currentProduct.PadRight(20);
comparisonMessage += string.Format("{0:P2}",currentReturn).PadRight(10);
comparisonMessage += string.Format("{0:C2}",currentProfit).PadRight(10);
comparisonMessage += "\n";
comparisonMessage += newProduct.PadRight(20);
comparisonMessage += string.Format("{0:P2}", newReturn).PadRight(10);
comparisonMessage += string.Format("{0:C2}", newProfit).PadRight(10);
Console.WriteLine(comparisonMessage);
//////////////////////////////////////////////////////////////////////////////////////////
-------> INDEX OF -- tricks
string message = "What is the value <span>between the tags</span>";

const string openSpan = "<span>";
const string closeSpan = "</span>";

int openingPosition = message.IndexOf(openSpan);
int closingPosition = message.IndexOf(closeSpan);

openingPosition += openSpan.Length;

//Console.WriteLine(openingPosition);
//Console.WriteLine(closingPosition);

int lenght = closingPosition - openingPosition;
Console.WriteLine(lenght);
Console.WriteLine(message.Substring(openingPosition, lenght));

////////////////////////////////////////////////////////////------------------------------------> INDEX OF -- tricks
string[] mensagens = { "Me diga o que há dentro da tag <span>Olá Giovani!</span>", "Me diga o que há dentro da tag <span>Você tem 24 anos!</span>" };
const string openSpan = "<span>";
const string closeSpan = "</span>";

for (int i = 0; i < mensagens.Length; i++)
{   
    int trackOpen = mensagens[i].IndexOf(openSpan); 
    int trackClose = mensagens[i].IndexOf(closeSpan);
    trackOpen+=6;
    int path = trackClose - trackOpen;
    Console.WriteLine(mensagens[i].Substring(trackOpen, path));
}

////////////////////////////////////////////////////////-----------------------------------> INDEXOFANY (UTILIZAÇÃO DE MATRIZ PARA IDENTIFICAR CHAR DENTRO DE OUTRA STRING)
/*
string message = "Help (find) the {opening symbols}";
Console.WriteLine($"Searching THIS Message: {message}");
char[] openSymbols = { '[', '{', '('};
int startPosition = 5;
int openingPosition = message.IndexOfAny(openSymbols);
Console.WriteLine($"Found WITHOUT using startPosition: {message.Substring(openingPosition)}");

openingPosition = message.IndexOfAny(openSymbols, startPosition);
Console.WriteLine($"Found WITH using startPosition {startPosition}: {message.Substring(openingPosition)}");
*/

// Aplicando IndexOfAny em multiploes caracteres

string message = "(What if) I have [different symbols] but every {open symbols} needs a [matching closing symbol]?";

char[] openSymbols = { '[', '{', '(' };

int closingPosition = 0;

while (true)
{

    int openingPosition = message.IndexOfAny(openSymbols, closingPosition);
    if (openingPosition == -1) break;

    string currentSymbol = message.Substring(openingPosition, 1);

    char matchingSymbol = ' ';

    switch (currentSymbol)
    {
        case "[":
            matchingSymbol = ']';
            break;
        case "{":
            matchingSymbol = '}';
            break;
        case "(":
            matchingSymbol = ')';
            break;
    }
    openingPosition += 1;
    closingPosition = message.IndexOf(matchingSymbol, openingPosition);

    int length = closingPosition - openingPosition;
    Console.WriteLine(message.Substring(openingPosition, length));
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------------>> Desafio Alterar cadeia de caracteres com IndexOf,Remove e REPLACE

const string input = "<div><h2>Widgets &trade;</h2><span>5000</span></div>";

string quantity = "";
string output = "";

//---------------Constante para tags <span></span>
const string openSpan = "<span>";
const string closeSpan = "</span>";

//------------ localizar posição <span> utilizando a constante acima
int spanOpen = input.IndexOf(openSpan) + openSpan.Length;
int spanClose = input.IndexOf(closeSpan);

//---------- comprimento entre a abertura e o fechamento da tag <span>
int spanLength = spanClose - spanOpen;

//------------ exibir conteudo dentro da tag
quantity = "Quantity: " + input.Substring(spanOpen, spanLength);

// ------------------ constante para tags "&trade;" e "&reg;" 
const string tradeTag = "&trade;";
const string regTag = "&reg;";

//------------------ substituir tag por outra tag
output = input.Replace(tradeTag, regTag);

// ------ constante de tag abertura <div> e remoção da mesma dentro da string
const string openDiv = "<div>";
int divOpen = output.IndexOf(openDiv);
output = output.Remove(divOpen, openDiv.Length);

// ------ constante de tag fechamento </div> e remoção da mesma dentro da string
const string closeDiv = "</div>";
int divClose = output.IndexOf(closeDiv);
output = output.Remove(divClose, closeDiv.Length);

output = $"Output: {output}";

Console.WriteLine(quantity);
Console.WriteLine(output);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
