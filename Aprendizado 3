// ---------------------> Minha solução 
// Trabalhando com .Split, String.Join, Array.Reverse(minhaArray);

string pangram = "The quick brown fox jumps over the lazy dog";
string[] pangramStringArray = pangram.Split(" ");
char[] pangramCharArray = new char[5];
string[] pangramReverseArray = new string[9];
string pangramReverse = "";

for (int i = 0; i < 9; i++)
{
    string convert = pangramStringArray[i];
    pangramCharArray = convert.ToCharArray();
    for (int j = 0; j < pangramCharArray.Length; j++)
    {
        pangramReverseArray[i] += pangramCharArray[j];
    }
}
pangramReverse = String.Join(" ", pangramReverseArray);
Console.WriteLine(pangramReverse);

// ---------------- Solução LEARN
// Trabalhando com .Split, String.Join, Array.Reverse(minhaArray);
// Aqui foi utilizado o construtor de string .... newMessage[i] = new string(letters);

string pangram = "The quick brown fox jumps over the lazy dog";

string[] message = pangram.Split(' ');

string[] newMessage = new string[message.Length];

for(int i = 0; i < message.Length; i++)
{
    char[] letters = message[i].ToCharArray();
    Array.Reverse(letters);
    newMessage[i] = new string(letters);
}

string result = String.Join(' ', newMessage);
Console.WriteLine(result);

////////////////////////////////////////// ---------------------> Minha solução( Analisar uma cadeia de caracteres de pedidos, classificá-los e marcar possíveis erro )
string orderStream = "B123,C234,A345,C15,B177,G3003,C235,B179";
string[] pedidos = orderStream.Split(',');

Array.Sort(pedidos);
for (int i = 0; i < pedidos.Length; i++)
{
    char[] letters = pedidos[i].ToCharArray();
    Console.WriteLine(letters.Length != 4 ? $"{pedidos[i]}\t- Error" : $"{pedidos[i]}");
}

///////////// ---------------- Solução LEARN ( Analisar uma cadeia de caracteres de pedidos, classificá-los e marcar possíveis erro )

string orderStream = "B123,C234,A345,C15,B177,G3003,C235,B179";
string[] items = orderStream.Split(',');
Array.Sort(items);

foreach (var item in items)
{
    if (item.Length == 4)
    {
        Console.WriteLine(item);
    }
    else
    {
        Console.WriteLine(item + "\t- Error");
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////
///////// -----> Formatação de Valores >>>>
int invoiceNumber = 1201;
decimal productShares = 25.4568m;
decimal subtotal = 2750.00m;
decimal taxPercentage = .15825m;
decimal total = 3185.19m;

Console.WriteLine($"Invoice number: {invoiceNumber}");
Console.WriteLine($"    Shares: {productShares:N3} Product");
Console.WriteLine($"      Sub Total: {subtotal:C2}");
Console.WriteLine($"            Tax: {taxPercentage:P2}");
Console.WriteLine($"    Total Billed: {total:C}");

---->>minhaString.PadLeft(); ou PedRight(); // pode ser utilizado com ou sem caractere definido.
string input = "Pad this";
Console.WriteLine(input.PadLeft(12, '-'));
Console.WriteLine(input.PadRight(12, '-'));

string paymentId = "769C";
string payeeName = "Mr. Stephen Ortega";
string paymentAmount = "$5,000.00";

var formattedLine = paymentId.PadRight(6);
formattedLine += payeeName.PadRight(24);
formattedLine += paymentAmount.PadRight(10);

Console.WriteLine("1234567890123456789012345678901234567890");
Console.WriteLine(formattedLine);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// -->DESAFIO LEARN: Executar formatação de carta de negócios.

using System.Globalization;
CultureInfo.CurrentCulture = new CultureInfo("en-US");

string customerName = "Ms. Barros";
string currentProduct = "Magic Yield";
int currentShares = 2975000;
decimal currentReturn = 0.1275m;
decimal currentProfit = 55000000.0m;

string newProduct = "Glorious Future";
decimal newReturn = 0.13125m;
decimal newProfit = 63000000.0m;

//
Console.WriteLine($"Dear {customerName}\n");
Console.WriteLine($"As a customer of our {currentProduct} offering we are excited to tell you about a new financial product that would dramatically increase your return.\n");
Console.WriteLine($"Currently, you own {currentShares:C2} shares at a return of {currentReturn:P2}.\n");
Console.WriteLine($"Our new product, {newProduct} offers a return of {newReturn:P2}.  Given your current volume, your potential profit would be ¤{newProfit:N}.\n");
Console.WriteLine("Here's a quick comparison:\n");

string comparisonMessage = "";
comparisonMessage = currentProduct.PadRight(20);
comparisonMessage += string.Format("{0:P2}",currentReturn).PadRight(10);
comparisonMessage += string.Format("{0:C2}",currentProfit).PadRight(10);
comparisonMessage += "\n";
comparisonMessage += newProduct.PadRight(20);
comparisonMessage += string.Format("{0:P2}", newReturn).PadRight(10);
comparisonMessage += string.Format("{0:C2}", newProfit).PadRight(10);
Console.WriteLine(comparisonMessage);
//////////////////////////////////////////////////////////////////////////////////////////
-------> INDEX OF -- tricks
string message = "What is the value <span>between the tags</span>";

const string openSpan = "<span>";
const string closeSpan = "</span>";

int openingPosition = message.IndexOf(openSpan);
int closingPosition = message.IndexOf(closeSpan);

openingPosition += openSpan.Length;

//Console.WriteLine(openingPosition);
//Console.WriteLine(closingPosition);

int lenght = closingPosition - openingPosition;
Console.WriteLine(lenght);
Console.WriteLine(message.Substring(openingPosition, lenght));

////////////////////////////////////////////////////////////------------------------------------> INDEX OF -- tricks
string[] mensagens = { "Me diga o que há dentro da tag <span>Olá Giovani!</span>", "Me diga o que há dentro da tag <span>Você tem 24 anos!</span>" };
const string openSpan = "<span>";
const string closeSpan = "</span>";

for (int i = 0; i < mensagens.Length; i++)
{   
    int trackOpen = mensagens[i].IndexOf(openSpan); 
    int trackClose = mensagens[i].IndexOf(closeSpan);
    trackOpen+=6;
    int path = trackClose - trackOpen;
    Console.WriteLine(mensagens[i].Substring(trackOpen, path));
}

////////////////////////////////////////////////////////-----------------------------------> INDEXOFANY (UTILIZAÇÃO DE MATRIZ PARA IDENTIFICAR CHAR DENTRO DE OUTRA STRING)
/*
string message = "Help (find) the {opening symbols}";
Console.WriteLine($"Searching THIS Message: {message}");
char[] openSymbols = { '[', '{', '('};
int startPosition = 5;
int openingPosition = message.IndexOfAny(openSymbols);
Console.WriteLine($"Found WITHOUT using startPosition: {message.Substring(openingPosition)}");

openingPosition = message.IndexOfAny(openSymbols, startPosition);
Console.WriteLine($"Found WITH using startPosition {startPosition}: {message.Substring(openingPosition)}");
*/

// Aplicando IndexOfAny em multiploes caracteres

string message = "(What if) I have [different symbols] but every {open symbols} needs a [matching closing symbol]?";

char[] openSymbols = { '[', '{', '(' };

int closingPosition = 0;

while (true)
{

    int openingPosition = message.IndexOfAny(openSymbols, closingPosition);
    if (openingPosition == -1) break;

    string currentSymbol = message.Substring(openingPosition, 1);

    char matchingSymbol = ' ';

    switch (currentSymbol)
    {
        case "[":
            matchingSymbol = ']';
            break;
        case "{":
            matchingSymbol = '}';
            break;
        case "(":
            matchingSymbol = ')';
            break;
    }
    openingPosition += 1;
    closingPosition = message.IndexOf(matchingSymbol, openingPosition);

    int length = closingPosition - openingPosition;
    Console.WriteLine(message.Substring(openingPosition, length));
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------------>> Desafio Alterar cadeia de caracteres com IndexOf,Remove e REPLACE

const string input = "<div><h2>Widgets &trade;</h2><span>5000</span></div>";

string quantity = "";
string output = "";

//---------------Constante para tags <span></span>
const string openSpan = "<span>";
const string closeSpan = "</span>";

//------------ localizar posição <span> utilizando a constante acima
int spanOpen = input.IndexOf(openSpan) + openSpan.Length;
int spanClose = input.IndexOf(closeSpan);

//---------- comprimento entre a abertura e o fechamento da tag <span>
int spanLength = spanClose - spanOpen;

//------------ exibir conteudo dentro da tag
quantity = "Quantity: " + input.Substring(spanOpen, spanLength);

// ------------------ constante para tags "&trade;" e "&reg;" 
const string tradeTag = "&trade;";
const string regTag = "&reg;";

//------------------ substituir tag por outra tag
output = input.Replace(tradeTag, regTag);

// ------ constante de tag abertura <div> e remoção da mesma dentro da string
const string openDiv = "<div>";
int divOpen = output.IndexOf(openDiv);
output = output.Remove(divOpen, openDiv.Length);

// ------ constante de tag fechamento </div> e remoção da mesma dentro da string
const string closeDiv = "</div>";
int divClose = output.IndexOf(closeDiv);
output = output.Remove(divClose, closeDiv.Length);

output = $"Output: {output}";

Console.WriteLine(quantity);
Console.WriteLine(output);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ---------- > Projeto de desafio – Trabalhar com os dados variáveis em C# 

// ourAnimals array will store the following: 
string animalSpecies = "";
string animalID = "";
string animalAge = "";
string animalPhysicalDescription = "";
string animalPersonalityDescription = "";
string animalNickname = "";
string suggestedDonation = "";

// variables that support data entry
int maxPets = 8;
string? readResult;
string menuSelection = "";
decimal decimalDonation = 0.00m;

// array used to store runtime data
string[,] ourAnimals = new string[maxPets, 7];

// sample data ourAnimals array entries
for (int i = 0; i < maxPets; i++)
{
    switch (i)
    {
        case 0:
            animalSpecies = "dog";
            animalID = "d1";
            animalAge = "2";
            animalPhysicalDescription = "medium sized cream colored female golden retriever weighing about 45 pounds. housebroken.";
            animalPersonalityDescription = "loves to have her belly rubbed and likes to chase her tail. gives lots of kisses.";
            animalNickname = "lola";
            suggestedDonation = "85.00";
            break;

        case 1:
            animalSpecies = "dog";
            animalID = "d2";
            animalAge = "9";
            animalPhysicalDescription = "large reddish-brown male golden retriever weighing about 85 pounds. housebroken.";
            animalPersonalityDescription = "loves to have his ears rubbed when he greets you at the door, or at any time! loves to lean-in and give doggy hugs.";
            animalNickname = "gus";
            suggestedDonation = "49.99";
            break;

        case 2:
            animalSpecies = "cat";
            animalID = "c3";
            animalAge = "1";
            animalPhysicalDescription = "small white female weighing about 8 pounds. litter box trained.";
            animalPersonalityDescription = "friendly";
            animalNickname = "snow";
            suggestedDonation = "40.00";
            break;

        case 3:
            animalSpecies = "cat";
            animalID = "c4";
            animalAge = "";
            animalPhysicalDescription = "";
            animalPersonalityDescription = "";
            animalNickname = "lion";
            suggestedDonation = "";

            break;

        default:
            animalSpecies = "";
            animalID = "";
            animalAge = "";
            animalPhysicalDescription = "";
            animalPersonalityDescription = "";
            animalNickname = "";
            suggestedDonation = "";
            break;
    }

    ourAnimals[i, 0] = "ID #: " + animalID;
    ourAnimals[i, 1] = "Species: " + animalSpecies;
    ourAnimals[i, 2] = "Age: " + animalAge;
    ourAnimals[i, 3] = "Nickname: " + animalNickname;
    ourAnimals[i, 4] = "Physical description: " + animalPhysicalDescription;
    ourAnimals[i, 5] = "Personality: " + animalPersonalityDescription;
    
    if (!decimal.TryParse(suggestedDonation, out decimalDonation))
    {
        decimalDonation = 45.00m; // if suggestedDonation NOT a number, default to 45.00
    }
    ourAnimals[i, 6] = $"Suggested Donation: {decimalDonation:C2}";
}

// top-level menu options
do
{
    // NOTE: the Console.Clear method is throwing an exception in debug sessions
    Console.Clear();

    Console.WriteLine("Welcome to the Contoso PetFriends app. Your main menu options are:");
    Console.WriteLine(" 1. List all of our current pet information");
    Console.WriteLine(" 2. Display all dogs with a specified characteristic");
    Console.WriteLine();
    Console.WriteLine("Enter your selection number (or type Exit to exit the program)");

    readResult = Console.ReadLine();

    if (readResult != null)
    {
        menuSelection = readResult.ToLower();
    }

    // switch-case to process the selected menu option
    switch (menuSelection)
    {
        case "1":
            // list all pet info
            for (int i = 0; i < maxPets; i++)
            {
                if (ourAnimals[i, 0] != "ID #: ")
                {
                    Console.WriteLine();

                    for (int j = 0; j < 7; j++)
                    {
                        Console.WriteLine(ourAnimals[i, j].ToString());
                    }
                }
            }

            Console.WriteLine("\r\nPress the Enter key to continue");
            readResult = Console.ReadLine();

            break;

        case "2":
            // #1 Display all dogs with a multiple search characteristics

            string dogCharacteristics = "";

            while (dogCharacteristics == "")
            {
                // #2 have user enter multiple comma separated characteristics to search for
                Console.WriteLine($"\nEnter dog characteristics to search for separated by commas");
                readResult = Console.ReadLine();

                if (readResult != null)
                {
                    dogCharacteristics = readResult.ToLower();
                    Console.WriteLine();
                }
            }

            string[] dogSearches = dogCharacteristics.Split(",");
            // trim leading and trailing spaces from each search term
            for (int i = 0; i < dogSearches.Length; i++)
            {
                dogSearches[i] = dogSearches[i].Trim();
            }

            Array.Sort(dogSearches);
            // #4 update to "rotating" animation with countdown
            string[] searchingIcons = {" |", " /", "--", " \\", " *"};

            bool matchesAnyDog = false;
            string dogDescription = "";

            // loops through the ourAnimals array to search for matching animals
            for (int i = 0; i < maxPets; i++)
            {
                if (ourAnimals[i, 1].Contains("dog"))
                {

                    // Search combined descriptions and report results
                    dogDescription = ourAnimals[i, 4] + "\n" + ourAnimals[i, 5];
                    bool matchesCurrentDog = false;

                    foreach (string term in dogSearches)
                    {
                        // only search if there is a term to search for
                        if (term != null && term.Trim() != "")
                        {
                            for (int j = 2; j > -1 ; j--)
                            {
                                // #5 update "searching" message to show countdown
                                foreach (string icon in searchingIcons)
                                {
                                    Console.Write($"\rsearching our dog {ourAnimals[i, 3]} for {term.Trim()} {icon} {j.ToString()}");
                                    Thread.Sleep(100);
                                }
                                
                                Console.Write($"\r{new String(' ', Console.BufferWidth)}");
                            }

                            // #3a iterate submitted characteristic terms and search description for each term
                            if (dogDescription.Contains(" " + term.Trim() + " "))
                            {
                                // #3b update message to reflect current search term match 

                                Console.WriteLine($"\rOur dog {ourAnimals[i, 3]} matches your search for {term.Trim()}");

                                matchesCurrentDog = true;
                                matchesAnyDog = true;
                            }
                        }
                    }
                    
                    // #3d if the current dog is match, display the dog's info
                    if (matchesCurrentDog)
                    {
                        Console.WriteLine($"\r{ourAnimals[i, 3]} ({ourAnimals[i, 0]})\n{dogDescription}\n");
                    }
                }
            }

            if (!matchesAnyDog)
            {
                Console.WriteLine("None of our dogs are a match found for: " + dogCharacteristics);
            }

            Console.WriteLine("\n\rPress the Enter key to continue");
            readResult = Console.ReadLine();

            break;

        default:
            break;
    }
} 
while (menuSelection != "exit");

/////////////////////////////////////////////////////////////////////////////////////
// ---- Meu teste de menu, utilizando informações aprendidas acima, realizando pesquisa de termos, e utilizando MÉTODOS THREAD.SLEEP(); e CONSOLE.BUFFERWIDTH

string id = "";
string nome = "";
string sexo = "";
string obsUsuario = "";

string[,] cadastros = new string[4, 4];
string? input;

for (int i = 0; i < 4; i++)
{
    switch (i)
    {
        case 0:
            id = "M1";
            nome = "Trevor";
            sexo = "masculino";
            obsUsuario = "Jovem, média idade, possui 1 casa, não possui veiculo";

            break;
        case 1:
            id = "M2";
            nome = "Loktar";
            sexo = "masculino";
            obsUsuario = "adulto, alta idade, possui 2 casas, possui 1 carro";
            break;
        case 2:
            id = "F3";
            nome = "Vitoria";
            sexo = "feminino";
            obsUsuario = "adulto, média idade, possui casa, não possui veiculo";
            break;
        case 3:
            id = "F4";
            nome = "Leticia";
            sexo = "feminino";
            obsUsuario = "adulto, média idade, possui apartamento, possui moto";
            break;
        default:
            id = "";
            nome = "";
            sexo = "";
            obsUsuario = "";
            break;
    }

    cadastros[i, 0] = "ID #: " + id;
    cadastros[i, 1] = "Nome: " + nome;
    cadastros[i, 2] = "Sexo: " + sexo;
    cadastros[i, 3] = "Observação Usuario: " + obsUsuario;
}

string obsPesquisa = "";

while (obsPesquisa == "")
{
    Console.WriteLine("\rEntre termos com virgula, para pesquisar um cadastro pelas observações: ");
    input = Console.ReadLine();
    if (input != null)
    {
        obsPesquisa = input.ToLower().Trim();
    }
}

string[] pesquisa = obsPesquisa.Split(',');

for (int i = 0; i < pesquisa.Length; i++)
{
    pesquisa[i] = pesquisa[i].Trim();
}
Array.Sort(pesquisa);

string[] searchIcons = { ":)", "C:", ":|", ":3" };
bool infoEncontrada = false;
bool naoExisteTermo = true;

for (int i = 0; i < 4; i++)
{
    if (cadastros[0, 1] != "ID #: ")
    {
        string termoPesquisa = cadastros[i, 2] + "\n" + cadastros[i, 3];

        foreach (string termo in pesquisa)
        {
            if (termo != null && termo.Trim() != "")
            {
                foreach (string icon in searchIcons)
                {
                    Console.Write($"\rBuscando pesquisa em {cadastros[i, 1]} {termo} {icon}");
                    Thread.Sleep(250);
                }
                Console.Write($"\r{new String(' ', Console.BufferWidth)}");

                if (termoPesquisa.Contains(termo))
                {
                    Console.WriteLine($"\r\n{cadastros[i, 1]} possui {termo} em suas informações!");
                    infoEncontrada = true;
                    naoExisteTermo = false;
                }
            }
        }

        if (infoEncontrada)
        {
            Console.WriteLine($"{cadastros[i, 1]} ({cadastros[i, 0]})\n{termoPesquisa}");
        }
    }
}
if (naoExisteTermo)
{
    Console.WriteLine("Não encontramos resultados para sua pesquisa");
}
