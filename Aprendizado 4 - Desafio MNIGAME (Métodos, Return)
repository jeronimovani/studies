using System;

Random random = new Random();
Console.CursorVisible = false;
ConsoleKeyInfo keyInfo = Console.ReadKey(true);
int height = Console.WindowHeight - 1;
int width = Console.WindowWidth - 100;
bool shouldExit = false;

// Console position of the player
int playerX = 0;
int playerY = 0;

// Console position of the food
int foodX = 0;
int foodY = 0;

// Available player and food strings
string[] states = { "('-')", "(^-^)", "(X_X)" };
string[] foods = { "@@@@@", "$$$$$", "#####" };

// Current player string displayed in the Console
string player = states[0];

// Index of the current food
int food = 0;

InitializeGame();
while (!shouldExit)
{
    if (TerminalResized())
    {
        Console.Clear();
        Console.WriteLine("\t\tConsole was resized. Program exiting.");
        shouldExit = true;
        break;
    }
    if (keyInfo.Key != ConsoleKey.Escape && InvalidKey())
    {
        Console.Clear();
        Console.WriteLine("\t\tInvalid key has been pressed. Program exiting");
        shouldExit = true;
        break;
    }
    Move();
    if (PlayerMeetsFood())
    {
        ChangePlayer(FoodKill());
        FreezePlayer(FoodKill());
        ShowFood();
    }
}

// Checks if player is (^-^).
bool SpeedChar()
{
    return player.Equals(states[1]);
}

// Displays random food at a random location
void ShowFood()
{
    // Update food to a random index
    food = random.Next(0, foods.Length);

    // Update food position to a random location
    foodX = random.Next(0, width - player.Length);
    foodY = random.Next(0, height - 1);

    // Display the food at the location
    Console.SetCursorPosition(foodX, foodY);
    Console.Write(foods[food]);
}

// Verify if the killer food has been eat.
string FoodKill()
{
    return foods[food] == foods[2] ? states[2] : states[food];
}

// Changes the player to match the food consumed
void ChangePlayer(string foodKill)
{
    player = foodKill;
    Console.SetCursorPosition(playerX, playerY);
    Console.Write(player);
}

// Temporarily stops the player from moving, check if eat the killer food.
void FreezePlayer(string foodKill)
{
    if (foodKill.Equals(foods[2]))
    {
        System.Threading.Thread.Sleep(1000);
    }
}

// Reads directional input from the Console and moves the player
void Move(bool invalidKey = false)
{
    if (invalidKey) return;
    int lastX = playerX;
    int lastY = playerY;

    if (SpeedChar())
    {
        switch (Console.ReadKey(true).Key)
        {
            case ConsoleKey.UpArrow:
                playerY --;
                break;
            case ConsoleKey.DownArrow:
                playerY ++;
                break;
            case ConsoleKey.LeftArrow:
                playerX -= 3;
                break;
            case ConsoleKey.RightArrow:
                playerX += 3;
                break;
            case ConsoleKey.Escape:
                Console.Clear();
                Console.WriteLine("\t\tExiting game...");
                shouldExit = true;
                break;
        }
    }
    else
    {
        switch (Console.ReadKey(true).Key)
        {
            case ConsoleKey.UpArrow:
                playerY--;
                break;
            case ConsoleKey.DownArrow:
                playerY++;
                break;
            case ConsoleKey.LeftArrow:
                playerX--;
                break;
            case ConsoleKey.RightArrow:
                playerX++;
                break;
            case ConsoleKey.Escape:
                Console.Clear();
                Console.WriteLine("\t\tExiting game...");
                shouldExit = true;
                break;
        }
    }

    // Clear the characters at the previous position
    Console.SetCursorPosition(lastX, lastY);
    for (int i = 0; i < player.Length; i++)
    {
        Console.Write(" ");
    }

    // Keep player position within the bounds of the Terminal window
    playerX = (playerX < 0) ? 0 : (playerX >= width ? width : playerX);
    playerY = (playerY < 0) ? 0 : (playerY >= height ? height : playerY);

    // Draw the player at the new location
    Console.SetCursorPosition(playerX, playerY);
    Console.Write(player);
}

// Clears the console, displays the food and player
void InitializeGame()
{
    Console.Clear();
    ShowFood();
    Console.SetCursorPosition(0, 0);
    ChangePlayer(FoodKill());
}

// Validate if Player position is the same of Food Position
bool PlayerMeetsFood()
{
    return playerX == foodX && playerY == foodY;
}

// Checks wether a non-arrow key has been pressed
bool InvalidKey()
{
    keyInfo = Console.ReadKey(true);
    return keyInfo.Key != ConsoleKey.UpArrow && keyInfo.Key != ConsoleKey.DownArrow && keyInfo.Key != ConsoleKey.LeftArrow && keyInfo.Key != ConsoleKey.RightArrow;
}

// Returns true if the Terminal was resized 
bool TerminalResized()
{
    return height != Console.WindowHeight - 1 || width != Console.WindowWidth - 100;
}
