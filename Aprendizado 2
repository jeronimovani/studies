///////////////////////////////////////////////// Entrada de Usuario com validadores

string? readResult;
string? secondLine;
bool validEntry = false;

Console.Clear();

Console.WriteLine(">>>> Enter a first String containing at least five characters:");
do
{
    readResult = Console.ReadLine();
    if(readResult != null)
    {
        if(readResult.Trim().ToLower() == "sair")
        {
        Console.WriteLine("Exiting inputing...");
        Console.ReadKey();
        break;
        }

        if(readResult.Length > 5)
        {
            if(readResult.Length > 20)
            {
                validEntry = false;
                Console.WriteLine($">> The input \"{readResult}\" have too many characters, please try again:");
            }
            else 
            {
                validEntry = true;
                Console.WriteLine(">>>> Now enter a second string, at least with five characters:");
            }
        }
        else
        {
            Console.WriteLine(">> Your input is invalid, please try again!");
        }
    }
} while (validEntry == false);
while (validEntry == true)
{
    secondLine = Console.ReadLine();
    if (secondLine != null)
    {
        if(secondLine.Length > 5)
        {
        Console.WriteLine($"First input:\t{readResult}\nSecond input:\t{secondLine}");
        break;
        }
        else{
            Console.WriteLine("Input dont have the Min characters");
        }

    }
}

/////////////////////////////////////////////////////////// Desafio - Validar entrada de inteiros

string? input;
string entrada = "";
bool vldNum = false;
int num = 0;
Console.Clear();

Console.WriteLine("Escreve um numero valido entre 5 e 10");
do {
input = Console.ReadLine();
if(input != null)
{
    entrada = input;
}

vldNum = int.TryParse(input, out num);
//Verificar se o numero inserido é valido!

if(vldNum == true)
{
    if(num <=5 || num >=10)
    {
        vldNum = false;
        Console.WriteLine($"O numero {num} não é aceito, por favor insira um numero entre 5 e 10.");
    }
}
else
{
    Console.WriteLine($"O valor inserido não é valido, favor insira um valor a ser validado!");
}

} while (vldNum == false);

Console.WriteLine($"O numero ({num}) foi aceito.");

////////////////////////////////////////////////////////////////////// Desafio - Validar cadeia de caracteres;

string? input;
string entrada = "";
bool validy = false;

string[] cargos = {"administrator", "manager", "user"};

Console.WriteLine("Enter your role name (Administrator, Manager, or User):");
do
{
    input = Console.ReadLine();
    if(input != null)
    {
        entrada = input;
    }
    for(int i = 0; i < 3; i++)
    {
        if(entrada.Trim().ToLower() == cargos[i])
        {
            validy = true;
            break;
        }
        else
        {
           validy = false;
        }
    }
    if(!validy)
    {
        Console.WriteLine($"That role name you entered, ({entrada.Trim()}) is not valid. Enter your role name (Administrator, Manager, or User):");
    }
} while (validy == false);
Console.WriteLine($"Your input value ({entrada.Trim()}) haas been accepted.");

///////////////////////////////////////////////////////////////////////// DESAFIO - IndexOf para busca e alteração de string.

string[] frases = {"O sistema. Deve. Retornar. em cada linha. separado por. pontos", "Sim Vani!"};
int matriz = frases.Length;

int localPonto = 0;
for (int i = 0; i < matriz; i++)
{   

    int count = 0;
        string minhaFrase = frases[i];
   
        localPonto = minhaFrase.IndexOf(".");
    
    string minhaSentença;
    while (localPonto != -1)
    {
        minhaSentença = minhaFrase.Remove(localPonto);
        //
        minhaFrase = minhaFrase.Substring(localPonto + 1);

        minhaFrase = minhaFrase.TrimStart();

        localPonto = minhaFrase.IndexOf(".");
    
    Console.WriteLine($"{minhaSentença}");
    }

minhaSentença = minhaFrase.Trim();
Console.WriteLine(minhaSentença);
}

////////////////////////////////// ALGUNS TIPOS DE DADOS NUMÉRICOS

Console.WriteLine("Signed integral types:");
Console.WriteLine($"sbyte   : {sbyte.MinValue} to {sbyte.MaxValue}");
Console.WriteLine($"short   : {short.MinValue} to {short.MaxValue}");
Console.WriteLine($"int     : {int.MinValue} to {int.MaxValue}");
Console.WriteLine($"long    : {long.MinValue} to {long.MaxValue}");

Console.WriteLine("Unsigned integral types:");
Console.WriteLine($"byte    : {byte.MinValue} to {byte.MaxValue}");
Console.WriteLine($"ushort  : {ushort.MinValue} to {ushort.MaxValue}");
Console.WriteLine($"uint    : {uint.MinValue} to {uint.MaxValue}");
Console.WriteLine($"ulong   : {ulong.MinValue} to {ulong.MaxValue}");

Console.WriteLine("Floating point types:");
Console.WriteLine($"Float   : {float.MinValue} to {float.MaxValue} (with ~6-9 digits of precision)");
Console.WriteLine($"Double  : {double.MinValue} to {double.MaxValue} (with ~15-17 digits of precision)");
Console.WriteLine($"Decimal : {decimal.MinValue} to {decimal.MaxValue} (with ~28-29 digits of precision)");

////////////////////////////////// 
