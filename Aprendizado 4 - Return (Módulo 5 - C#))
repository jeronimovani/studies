|#|________________________________________|#|
|#|________________________________________|#|
|#|__________[ TIPOS DE RETORNO ]__________|#|
|#|________________________________________|#|
|#|________________________________________|#|

double total = 0;
double minimumSpend = 30.00;

double[] items = { 15.97, 3.50, 12.25, 22.99, 10.98 };
double[] discounts = { 0.30, 0.00, 0.10, 0.20, 0.50 };

for(int i = 0; i < items.Length; i++)
{
    total += GetDiscountedPrice(i);
}
total -= TotalMeetsMinimum() ? 5.00: 0.00;
Console.WriteLine($"Total: R${FormatDecimal(total)}");
Console.WriteLine(items[0] * (1 - discounts[0]));
double GetDiscountedPrice(int itemIndex)
{
    // Calcular o desconto de cada 1 dos items
    return items[itemIndex] * (1 - discounts[itemIndex]);
}

bool TotalMeetsMinimum()
{
    // Validar se o total está de acordo com o minimo.
    return total >= minimumSpend;
}

string FormatDecimal(double input)
{
    // Formatar o double para que fique apenas 4 digitos.
    return input.ToString().Substring(0, 5);
}
|#|____________________________________________________________________________________________________________________________|#|
|#|____________________________________________________________________________________________________________________________|#|
|#|__________TIPOS DE DADO CORRETO (Um return normalmente deve exibir apenas o tipo de dado correspondente ao método.)_________|#|
|#|____________________________________________________________________________________________________________________________|#|
|#|____________________________________________________________________________________________________________________________|#|

double usd = 23.73;
int vnd = UsdToVnd(usd);

Console.WriteLine($"${usd} USD = ${vnd} VND");
Console.WriteLine($"${vnd} VND = ${VndToUsd(vnd)} USD");

int UsdToVnd(double usd)
{
    int rate = 23500;
    return (int)(rate * usd);
}

double VndToUsd(int vnd)
{
    double rate = 23500;
    return vnd / rate;
}

Console.WriteLine(Valor());
double Valor()
{
    return 100 * 0.5;
}

|#|_________________________________________________________________________|#|
|#|_________________________________________________________________________|#|
|#|__________Realizar a reversão de palavras e frases (Sem métodos)_________|#|
|#|_________________________________________________________________________|#|
|#|_________________________________________________________________________|#|

string palavra = "Vani";
string frase = "Vini vidi Vici";

Console.WriteLine(ReverterPalavra(palavra));
Console.WriteLine(ReverterFrase(frase));

string ReverterPalavra(string word)
{
    string result = "";
    for (int i = word.Length - 1; i >= 0; i--)
    {
        result += word[i];
    }
    return result;
}

string ReverterFrase(string frase)
{
    string result = "";
    string[] sentença = frase.Split(" ");
    foreach (string palavra in sentença)
    {
        //result+= ReverterPalavra(palavra) + " ";
        for(int i = palavra.Length -1; i >=0; i--)
        {
            result+= palavra[i];
        }
        result += " ";
    }
    return result.TrimEnd();
}

|#|________________________________________________|#|
|#|________________________________________________|#|
|#|__________Método de VALIDAR PALINDROMOS_________|#|
|#|________________________________________________|#|
|#|________________________________________________|#|

string[] words = { "racecar", "talented", "deified", "teet", "tenet" };

Console.WriteLine("Is it a palindrome?");

foreach (string word in words)
{
    Console.WriteLine($"{word}: {IsPalindrome(word)}");
}

bool IsPalindrome(string word)
{
    int start = 0;
    int end = word.Length - 1;

    while (start < end)
    {

        if (word[start] != word[end])
        {
            return false;
        }
        start++;
        end--;
    }
    return true;
}

|#|_______________________________________________________________________________________________________________________________________________________________________________|#|
|#|_______________________________________________________________________________________________________________________________________________________________________________|#|
|#|__________Exercício – Retornar matrizes de métodos - (Somar dois index de 1 matriz, se o resultado foi o alvo setado, retorna os dois indexes dentro de uma matriz 2D)_________|#|
|#|_______________________________________________________________________________________________________________________________________________________________________________|#|
|#|_______________________________________________________________________________________________________________________________________________________________________________|#|

int target = 0;
int[] coins = { 0, 5};
int[,] result = TwoCoins(coins, target);

if (result.Length == 0)
{
    Console.WriteLine("No coins founding!");
}
else
{
    for (int i = 0; i < result.GetLength(0); i++)
    {
        if (result[i, 0] == -1)
        {
            break;
        }
        Console.WriteLine($"Localizamos {result[i, 0]} & {result[i, 1]}");
    }
}

int[,] TwoCoins(int[] coins, int target)
{
    int[,] result = { { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } };
    int count = 0;

    for (int curr = 0; curr < coins.Length; curr++)
    {
        for (int next = curr + 1; next < coins.Length; next++)
        {
            if (coins[curr] + coins[next] == target) //----------------------- SE VERDADE, ADICIONA OS DOIS VALORES A PRIMEIRA MATRIZ E ACIONA COUNT PARA IRMOS A PROXIMA MATRIZ
            {
                result[count, 0] = curr;
                result[count, 1] = next;
                count++;
            }
            if (count == result.GetLength(0))
            {
                return result;
            }
        }
    }
    return (count == 0) ? new int[0, 0] : result;
}

|#|_________________________________________________________|#|
|#|_________________________________________________________|#|
|#|__________Desafio - Desafio de minijogo de dados_________|#|
|#|_________________________________________________________|#|
|#|_________________________________________________________|#|


Random random = new Random();
string? input;
string name = "";

Console.Write("Quer inserir seu nome?");
name = Jogador();


Console.WriteLine($"{name}, você gostaria de jogar? (S/N)");
if (Jogar())
{
    Console.WriteLine($"Vamos lá");
    Joguinho();
}

void Joguinho()
{
    // METODO DO JOGO DE DADOS, SE O DADO FOR MAIOR QUE ALVO, VOCÊ GANHA!
    bool jogar = true;

    while (jogar)
    {
        int dados = Dados();
        int alvo = Alvo();
        Console.Clear();
        Console.WriteLine($"Você precisa tirar mais do que {alvo}");
        for (int i = 3; i >= 0; i--)
        {
            Console.Write($"\rLançando dados {i}");
            Thread.Sleep(800);
        }
        Console.WriteLine(new string('-', Console.BufferWidth));
        Console.WriteLine($"\r\nVocê tirou {dados}");
        Console.WriteLine(GanhouOuPerdeu(dados, alvo));
        Console.WriteLine("Quer jogar novamente? (S/N)");

        jogar = Jogar();
    }
}

int Dados()
{    // GERA O VALOR DO DADO
    return random.Next(0, 7);
}

int Alvo()
{    // GERA O VALOR DO ALVO
    return random.Next(0, 6);
}

string GanhouOuPerdeu(int dados, int alvo)
{ // VALIDA RESULTADO DO JOGO
    return dados > alvo ? "Você ganhou!" : "Você perdeu :(";
}

string Jogador()
{    // COLETAR NOME DE JOGADOR
    input = Console.ReadLine();
    if (input != null && input.Length > 2)
    {
        return input;
    }
    return "OAB";
}

bool Jogar()
{    // MÉTODO PARA INICIAR JOGO OU ENCERRAR
    bool entry = false;
    string escolha = "";
    while (!entry)
    {
        escolha = Console.ReadLine();
        if (escolha.Trim().ToLower() != "n" && escolha.ToLower().Trim() != "s")
        {
            Console.WriteLine($"Entre (S/N)");
            entry = false;
        }
        else
            entry = true;
    }
    return escolha.Trim().ToLower().Equals("s");
}
